(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))

(define (make-segment start-p end-p)
  (cons start-p end-p))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))

(define (make-rect seg1 seg2)
  (cons seg1 seg2))
(define (length seg)
  (let ((sqrt-of-sum-of-square (lambda (x y) (sqrt (+ (* x x) (* y y)))))
        (start-p (start-segment seg))
        (end-p (end-segment seg)))
    (sqrt-of-sum-of-square (- (x-point start-p) (x-point end-p)) (- (y-point start-p) (y-point end-p)))))
(define (height rect)
  (length (car rect)))
(define (width rect)
  (length (cdr rect)))

(define (aera rect)
  (* (height rect)
     (width rect)))
(define (perimeter rect)
  (* (+ (height rect)
        (width rect)) 2))
;testing
(define (print rect)
  (newline)
  (display (aera rect))
  (newline)
  (display (perimeter rect)))

(define new-rect (make-rect (make-segment (make-point 2 1) (make-point 1 2)) (make-segment (make-point 2 1) (make-point 5 4))))
(print new-rect)