(define (make-interval a b)
  (cons a b))
(define (upper-bound c)
  (max (car c) (cdr c)))
(define (lower-bound c)
  (min (car c) (cdr c)))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (>= 0 (* (upper-bound y) (lower-bound y)))
      (error "error!" y)
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))

(define (print interval)
  (newline)
  (display "(")
  (display (lower-bound interval))
  (display ",")
  (display (upper-bound interval))
  (display ")"))

(define (make-center-percent center percent)
  (let ((half-width (/ (abs (* center percent)) 2)))
    (cons (- center half-width) (+ center half-width))))

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))

;test
;the reason is that A/A is not equal to 1
(define r1 (make-interval 1 2))
(define r2 (make-interval 2 3))
(print (par1 r1 r2))
(print (par2 r1 r2))
(print (div-interval r1 r1))
(print (div-interval r1 r2))

(define r3 (make-center-percent 1.5 (/ 2 3)))
(define r4 (make-center-percent 2.5 (/ 2 5)))
(print (par1 r3 r4))
(print (par2 r3 r4))
(print (div-interval r3 r3))
(print (div-interval r3 r4))
;the same thing a(b+c) is not equal to ab + ac
(define a (make-interval 2 4))
(define b (make-interval -2 0))
(define c (make-interval 3 8))
(print (mul-interval a (add-interval b c)))
(print (add-interval (mul-interval a b) (mul-interval a c)))