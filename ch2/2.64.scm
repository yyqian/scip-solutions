(define (list2tree elements)
  (car (partial-tree elements (length elements))))

(define (make-tree entry left right)
  (list entry left right))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-szie (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-szie)))
              (let ((right-tree (car right-result))
                   (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(list2tree (list 1 2 3 4 5 6 7 8))

; T(n) = 2 * T(n/2) + O(1)
; T(n) = O(n)