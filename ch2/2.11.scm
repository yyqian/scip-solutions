(define (make-interval a b)
  (cons a b))
(define (upper-bound c)
  (max (car c) (cdr c)))
(define (lower-bound c)
  (min (car c) (cdr c)))
(define (print interval)
  (newline)
  (display "(")
  (display (lower-bound interval))
  (display ",")
  (display (upper-bound interval))
  (display ")"))


(define (mul-interval x y)
  (define type (lambda (interval) (cond ((and (>= (lower-bound interval) 0) (>= (upper-bound interval) 0)) 1)
                                        ((and (< (lower-bound interval) 0) (>= (upper-bound interval) 0)) 2)
                                        (else 3))))
  (let ((test-type (lambda (t1 t2) (and (= (type x) t1) (= (type y) t2))))
        (make-helper (lambda (f g h j)
          (make-interval (* (f x) (g y)) (* (h x) (j y))))))

    (cond ((test-type 1 1) (make-helper lower-bound lower-bound upper-bound upper-bound))
          ((test-type 1 2) (make-helper upper-bound lower-bound upper-bound upper-bound))
          ((test-type 1 3) (make-helper upper-bound lower-bound lower-bound upper-bound))
          ((test-type 2 1) (make-helper lower-bound upper-bound upper-bound upper-bound))
          ((test-type 2 2) (make-interval (min (* (lower-bound x) (upper-bound y)) (* (upper-bound x) (lower-bound y)))
                                          (max (* (lower-bound x) (lower-bound y)) (* (upper-bound x) (upper-bound y)))))
          ((test-type 2 3) (make-helper upper-bound lower-bound lower-bound lower-bound))
          ((test-type 3 1) (make-helper lower-bound upper-bound upper-bound lower-bound))
          ((test-type 3 2) (make-helper lower-bound upper-bound lower-bound lower-bound))
          ((test-type 3 3) (make-helper upper-bound upper-bound lower-bound lower-bound))
      )))

;testing
(define (testing a b c d)
  (define x (make-interval a b))
  (define y (make-interval c d))
  (print (mul-interval x y)))
(testing -10 20 -40 50)